openapi: 3.0.0
info:
  title: Software Engineering Project 
  description: API for student authentication, tasks, reporting, content, and assignments
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
  
paths:
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test_student@gmail.com"
      responses:
        '200':
          description: Login successful

  /logout:
    get:
      summary: User logout
      responses:
        '200':
          description: Logout successful

  /studinfo/{student_id}:
    get:
      summary: Get student details
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Student details retrieved

  /report:
    post:
      summary: Report an issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                issue_type:
                  type: string
                user_id:
                  type: integer
                course_id:
                  type: integer
                subject:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Issue reported

  /report/{user_id}:
    get:
      summary: Get issues reported by user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of reported issues

  /tasks/{user_id}:
    get:
      summary: Get tasks by user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of tasks

  /tasks:
    post:
      summary: Add a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                title:
                  type: string
                description:
                  type: string
                task_date:
                  type: string
                  format: date
      responses:
        '201':
          description: Task added

  /tasks/delete/{task_id}:
    delete:
      summary: Delete a task
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task deleted

  /content/{course_id}:
    get:
      summary: Get course content
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course content retrieved

  /content:
    post:
      summary: Add new course content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                content_name:
                  type: string
                content_type:
                  type: string
                transcript_url:
                  type: string
                url:
                  type: string
      responses:
        '201':
          description: Content added

  /content/edit/{content_id}:
    put:
      summary: Edit course content
      parameters:
        - name: content_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                content_name:
                  type: string
                content_type:
                  type: string
                transcript_url:
                  type: string
                url:
                  type: string
      responses:
        '200':
          description: Content updated

  /questions:
    post:
      summary: Add new questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  question_type:
                    type: string
                  assignment_id:
                    type: integer
                  question:
                    type: string
                  options:
                    type: array
                    items:
                      type: string
                  correct_options:
                    type: string
                  marks:
                    type: integer
                  hints:
                    type: string
                  text_solution:
                    type: string
      responses:
        '201':
          description: Questions added

  /questions/{question_id}:
    put:
      summary: Edit existing question
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_type:
                  type: string
                correct_options:
                  type: string
      responses:
        '200':
          description: Question updated

  /starred_questions/{student_id}:
    get:
      summary: Get starred questions
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Starred questions retrieved

  /assignments/{assignment_id}/{student_id}:
    get:
      summary: Get assignment questions and responses
      parameters:
        - name: assignment_id
          in: path
          required: true
          schema:
            type: integer
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Assignment details retrieved
  /ai:
    post:
      summary: Chat with AI
      description: |
        The /ai API enables different types of AI operations depending on the interaction type specified. It supports three types of interactions:
        
        - Type: "gen"
          Purpose: Generates questions based on the content of a specific week.
          Example: For the given week, the AI will generate relevant questions based on the content covered during that week. This is useful for review, quizzes, or preparing for exams.
        
        - Type: "sumup"
          Purpose: Summarizes the content of a specific week or lecture.
          Example: The AI will provide a concise summary of the material covered in the week or lecture, highlighting key points and concepts.
        
        - Type: "chat"
          Purpose: Facilitates AI-user interaction through conversations.
          Example: Used for casual conversation, answering user queries, providing explanations, clearing doubts, solving any user query, or motivational interactions. The AI can respond to user questions and engage in back-and-forth dialogue.
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ["gen", "sumup", "chat"]
                  description: "Defines the type of interaction the AI will perform. It could be 'gen' for generating questions, 'sumup' for summarizing content, or 'chat' for conversation."
                prompt:
                  type: string
                  description: "The main content or question that the AI will respond to. This input guides the AI's response."
                background:
                  type: string
                  description: "A stringified JSON object containing contextual information about the user's current situation, such as the current page, section, or lecture details. This helps the AI provide more tailored and accurate responses based on user context."
              required:
                - type
                - prompt
                - background
      responses:
        200:
          description: "AI operation result successfully generated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  res:
                    type: string
                    description: |
                      The response, which will vary based on the type of interaction:
                      - For 'gen': The response will contain an array of question objects relevant to the provided content.
                      - For 'sumup': The response will include a summary key, containing the summarized content of the week or lecture.
                      - For 'chat': The response will include a response key, containing the AI's reply to the user's query or message.
        400:
          description: "Invalid request, such as missing or incorrect data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Explanation of what went wrong with the request."
        500:
          description: "Server error occurred during the AI operation."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                    description: "Error message from the server."